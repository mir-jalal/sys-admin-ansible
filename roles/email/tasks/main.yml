---
- name: Get OpenStack metadata
  uri:
    url: http://169.254.169.254/latest/meta-data/public-ipv4 
    method: GET
    status_code: 200
    return_content: yes
  register: cloud_metadata

- name: Add MX for email
  blockinfile:
    path: /etc/named/{{ hostname }}.{{ domain_name }}
    block: |
      @       IN      MX  10  mail
      mail IN A {{ cloud_metadata.content }}
    marker: 
      "; {mark} ANSIBLE MANAGED BLOCK for CNAME for mail"
  notify: 
  - increase serial
  - restart bind

- name: Flush handlers
  meta: flush_handlers

- name: install postfix
  dnf:
    name: postfix
    state: installed 

- name: change parameters in /etc/postfix/main.cf
  shell: |
    awk -i inplace '{ if ( $0 ~ /^inet_protocols / ) $3="ipv4"; print}' /etc/postfix/main.cf
    awk -i inplace '{ if ( $0 ~ /^myhostname / ) $3="mail.{{ hostname }}.{{ domain_name }}"; print}' /etc/postfix/main.cf
    awk -i inplace '{ if ( $0 ~ /^inet_interfaces / ) $3="all"; print}' /etc/postfix/main.cf
    awk -i inplace '{ if ( $0 ~ /^mydestination / ) $0="mydestination = mail.{{ hostname }}.{{ domain_name }} localhost.{{ hostname }}.{{ domain_name }}, localhost, {{ hostname }}.{{ domain_name }}"; print}' /etc/postfix/main.cf
    awk -i inplace '{ if ( $0 ~ /^mynetworks_style / ) $3="host"; print}' /etc/postfix/main.cf
    awk -i inplace '{ if ( $0 ~ /^mynetworks / ) $0="#"; print}' /etc/postfix/main.cf
    awk -i inplace '{ if ( $0 ~ /^relayhost / ) $0="#"; print}' /etc/postfix/main.cf
  notify: restart postfix

- name: make sure parameters are valid 
  lineinfile:
    dest: /etc/postfix/main.cf
    line: "{{ item }}"
    state: present
    create: yes
  with_items: 
  - inet_protocols = ipv4
  - myhostname = {{ hostname }}.{{ domain_name }}
  - inet_interfaces = all
  - mydestination = mail.{{ hostname }}.{{ domain_name }} localhost.{{ hostname }}.{{ domain_name }}, localhost, {{ hostname }}.{{ domain_name }}
  - mynetworks_style = host
  notify: restart postfix

- name: Add user mailuser
  user:
    name: "{{ mail_user }}"
    state: present
    password: "{{ mail_password | password_hash('sha512') }}"
  no_log: true

- name: Flush handlers
  meta: flush_handlers

- name: send mail 
  become: true
  become_user: "{{ mail_user }}"
  shell: 'echo -e "Subject: terminal email-01 \n\nHello! \nthis is a e-mail sent with ansible command from terminal\nby {{ mail_user }} from {{ hostname }}.{{ domain_name }}" | sendmail {{ mail_to }}'

- name: install dovecot
  dnf:
    name: dovecot
    state: installed

- name: change parameters
  shell: |
    awk -i inplace '{ if ( $0 ~ /^{{ item.key }} / ) $0="{{ item.value }}"; print}' {{ item.filename }}
  with_items:
    - key: "mail_debug"
      value: "mail_debug = yes"
      filename: /etc/dovecot/conf.d/10-logging.conf
    - key: "protocols"
      value: "protocols = imap lmtp"
      filename: /etc/dovecot/dovecot.conf
    - key: "auth_mechanisms"
      value: "auth_mechanisms = plain login"
      filename: /etc/dovecot/conf.d/10-auth.conf
    - key: "auth_username_format"
      value: "auth_username_format = %n"
      filename: /etc/dovecot/conf.d/10-auth.conf
    - key: "mail_location"
      value: "mail_location = maildir:~/mail"
      filename: /etc/dovecot/conf.d/10-mail.conf
    - key: "mail_privileged_group"
      value: "mail_privileged_group = mail"
      filename: /etc/dovecot/conf.d/10-mail.conf
    - key: "disable_plaintext_auth"
      value: "disable_plaintext_auth = no"
      filename: /etc/dovecot/conf.d/10-auth.conf
    - key: "ssl"
      value: "ssl = no"
      filename: /etc/dovecot/conf.d/10-ssl.conf
  notify: restart dovecot

- name: copy 15-mailboxes.conf
  copy:
    src: 15-mailboxes.conf
    dest: /etc/dovecot/conf.d/15-mailboxes.conf
  notify: restart dovecot

- name: make sure parameters are valid 
  lineinfile:
    dest: "{{ item.filename }}"
    line: "{{ item.line }}"
    state: present
    create: yes
  with_items: 
  - line: "mail_debug = yes"
    filename: /etc/dovecot/conf.d/10-logging.conf
  - line: "protocols = imap lmtp"
    filename: /etc/dovecot/dovecot.conf
  - line: "auth_mechanisms = plain login"
    filename: /etc/dovecot/conf.d/10-auth.conf
  - line: "auth_username_format = %n"
    filename: /etc/dovecot/conf.d/10-auth.conf
  - line: "mail_location = maildir:~/mail"
    filename: /etc/dovecot/conf.d/10-mail.conf
  - line: "mail_privileged_group = mail"
    filename: /etc/dovecot/conf.d/10-mail.conf
  - line: "disable_plaintext_auth = no"
    filename: /etc/dovecot/conf.d/10-auth.conf
  - line: "ssl = no"
    filename: /etc/dovecot/conf.d/10-ssl.conf  
  notify: restart dovecot

- name: add user dovecot to mail group
  user:
    name: "dovecot"
    group: "mail"
    append: yes

- name: Flush handlers
  meta: flush_handlers

- name: install telnet
  dnf:
    name: telnet
    state: installed

- name: add 25 and 143 to firewalld 
  firewalld:
    permanent: yes
    state: enabled
    port: "{{ item }}/tcp"
  with_items: 
  - 25
  - 143
  notify: restart firewalld 

- name: change parameters in /etc/postfix/main.cf
  shell: |
    awk -i inplace '{ if ( $0 ~ /^mailbox_transport / ) $0="mailbox_transport = lmtp:unix:private/dovecot-lmtp"; print}' /etc/postfix/main.cf
  notify: restart postfix

- name: copy master.cf 
  copy:
    src: master.cf
    dest: /etc/postfix/master.cf
  notify: restart postfix

- name: install epel-release and dnf-plugins-core
  dnf:
    name: ['epel-release', 'dnf-plugins-core']
    state: installed

- name: dnf config-manager --set-enabled powertools
  dnf:
    enable_plugin: powertools

- name: install a bunch of shit
  dnf:
    name: ['make', ' ImageMagick', ' ImageMagick-devel', ' ImageMagick-perl', ' pcre-devel', ' zlib', ' zlib-devel', ' libzip', ' libzip-devel', ' libmcrypt-devel', ' php', ' php-fpm', ' php-devel', ' php-pear', ' php-cli', ' php-gd', ' php-curl', ' php-xml', ' php-mysqlnd', ' php-mbstring', ' php-intl', ' php-ldap', ' mariadb', ' mariadb-server', 'httpd']
    state: installed

- name: install imagick mcrypt zip
  community.general.pear:
    name: pecl/imagick, pecl/mcrypt, pecl/zip
    state: installed
    prompts: 
    - (.*)Please provide the prefix of ImageMagick installation \[autodetect\] : autodetect
    - (.*)libmcrypt prefix? \[autodetect\] : autodetect
    - null


- name: add extension 
  lineinfile:
    dest: "/etc/php.d/20-{{ item }}.ini"
    line: "extension={{ item }}.so"
    state: present
    create: yes
  with_items: 
    - imagick
    - mcrypt
    - zip
  notify: 
    - restart mariadb
    - restart httpd 
    - restart php-fpm 

- name: create database roundcubmail
  mysql_db:
    name: roundcubemail
    state: present
    login_password: '{{ mysql_root_password }}'

- name: create roundcube user 
  mysql_user:
    name: roundcube
    password: '{{ mailuser_db_pass }}'
    login_password: '{{ mysql_root_password }}'
    priv: 'roundcubemail.*:ALL'
    host: localhost
  no_log: true
  
- name: download roundcube latest
  get_url:
    url: https://github.com/roundcube/roundcubemail/releases/download/1.4.11/roundcubemail-1.4.11-complete.tar.gz
    dest: /tmp/roundcube.tar.gz
    mode: '0440'
  
- name: extract roundcube
  unarchive:
    src: /tmp/roundcube.tar.gz
    remote_src: yes
    dest: /tmp
    owner: apache
    group: apache

- name: copy roundcube to /var/www/html/roundcube
  copy:
    src: /tmp/roundcubemail-1.4.11/
    remote_src: yes
    directory_mode: yes
    dest: /var/www/html/roundcubemail
    owner: apache
    group: apache

- name: sefcontext httpd_sys_rw_content_t
  sefcontext:
    target: '/var/www/html/roundcubemail'
    setype: httpd_sys_rw_content_t
    state: present

- name: create virtual host for roundcube
  template:
    src: virtualhostmail.j2
    dest: /etc/httpd/conf.d/mail.{{ hostname }}.conf
    owner: apache
    group: apache
    mode: '0644'
  notify: 
  - restart httpd
  - restart php-fpm

- name: create config for roundcube
  template:
    src: config.inc.php.j2
    dest: /var/www/html/roundcubemail/config/config.inc.php
    owner: apache
    group: apache
    mode: '0644'
  notify:
  - restart httpd
  - restart php-fpm

- name: seed database roundcubmail
  mysql_db:
    name: roundcubemail
    state: import
    login_password: '{{ mysql_root_password }}'
    target: /var/www/html/roundcubemail/SQL/mysql.initial.sql
  ignore_errors: true 

